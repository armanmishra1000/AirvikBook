{
  "info": {
    "name": "AirVikBook - User Login & Session Management",
    "description": "API collection for testing user login, session management, and password reset functionality",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "sessionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "resetToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Email/Password Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.tokens) {",
                  "        pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "        if (response.data.session) {",
                  "            pm.collectionVariables.set('sessionId', response.data.session.id);",
                  "        }",
                  "    }",
                  "}",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user).to.exist;",
                  "    pm.expect(jsonData.data.user.email).to.exist;",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.tokens).to.exist;",
                  "    pm.expect(jsonData.data.tokens.accessToken).to.exist;",
                  "    pm.expect(jsonData.data.tokens.refreshToken).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPassword123!\",\n  \"rememberMe\": false,\n  \"deviceInfo\": {\n    \"deviceId\": \"postman-test-device\",\n    \"deviceName\": \"Postman Test Device\",\n    \"userAgent\": \"PostmanRuntime/7.28.4\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Google OAuth Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.tokens) {",
                  "        pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains account status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.accountStatus).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"googleToken\": \"your-google-oauth-token-here\",\n  \"rememberMe\": false,\n  \"deviceInfo\": {\n    \"deviceId\": \"postman-google-device\",\n    \"deviceName\": \"Postman Google Device\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/google-login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "google-login"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains new access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.accessToken).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms logout', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.loggedOut).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\",\n  \"logoutFromAllDevices\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Session Management",
      "item": [
        {
          "name": "Get Active Sessions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains sessions array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.sessions).to.be.an('array');",
                  "    pm.expect(jsonData.data.totalSessions).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "sessions"]
            }
          },
          "response": []
        },
        {
          "name": "Logout from All Devices",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms all sessions invalidated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.sessionsInvalidated).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "sessions"]
            }
          },
          "response": []
        },
        {
          "name": "Logout from Specific Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms session invalidated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.loggedOut).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/sessions/{{sessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "sessions", "{{sessionId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Link Google Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms account linked', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.accountStatus.accountLinked).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"googleToken\": \"your-google-oauth-token-here\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/link-google",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "link-google"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Password Reset",
      "item": [
        {
          "name": "Request Password Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms email sent', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.emailSent).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "forgot-password"]
            }
          },
          "response": []
        },
        {
          "name": "Verify Reset Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms token valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.tokenValid).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/verify-reset-token/{{resetToken}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "verify-reset-token", "{{resetToken}}"]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms password reset', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.passwordReset).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{resetToken}}\",\n  \"newPassword\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "reset-password"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Login with Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.code).to.equal('INVALID_CREDENTIALS');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"WrongPassword123!\",\n  \"rememberMe\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Access Protected Route without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.code).to.equal('MISSING_TOKEN');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "sessions"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh with Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.code).to.equal('REFRESH_TOKEN_INVALID');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"invalid-refresh-token\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "refresh"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}